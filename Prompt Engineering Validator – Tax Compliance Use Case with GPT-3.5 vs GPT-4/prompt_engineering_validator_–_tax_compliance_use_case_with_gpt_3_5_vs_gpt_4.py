# -*- coding: utf-8 -*-
"""Prompt Engineering Validator – Tax Compliance Use Case with GPT-3.5 vs GPT-4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Snm_A_s6cRhIxk52n28v4Mwn0ufy-7s
"""

# ✅ Install OpenAI SDK - version 0.28 (compatible with current script)
!pip install openai==0.28 --quiet

#import of libraries
import openai
import getpass

# 🔐 Enter your API key securely (hidden input)
openai.api_key = getpass.getpass("🔐 Enter your OpenAI API key: ")

# 🎯 Prompt (business use case – tax compliance)
prompt = """
You are an Italian tax expert. Briefly list the main VAT obligations for an SRL (limited liability company) under the standard tax regime in 2024. Reply with 5 concise bullet points.
"""

# ⚙️ Settings for both models
messages = [
    {"role": "system", "content": "You are a senior assistant specialized in Italian tax compliance."},
    {"role": "user", "content": prompt}
]
temperature = 0.5
max_tokens = 500

# 📌 Define keyword list for evaluation
keywords = ["VAT", "invoice", "register", "communication", "filing"]

# 📤 Function to evaluate model output
def evaluate_output(output):
    score = sum(1 for kw in keywords if kw.lower() in output.lower())
    return {
        "output": output,
        "word_count": len(output.split()),
        "keyword_match": score,
        "relevance": "✅ Sufficient" if score >= 3 else "❌ Low"
    }

# 🤖 Run GPT-3.5-turbo
print("\n🔹 GPT-3.5-Turbo Output:\n")
response_35 = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=messages,
    temperature=temperature,
    max_tokens=max_tokens
)
output_35 = response_35['choices'][0]['message']['content']
eval_35 = evaluate_output(output_35)
print(output_35)

# 🧠 Evaluation Summary - 3.5
print("\n🔎 GPT-3.5 Evaluation:")
print(f"- Word count: {eval_35['word_count']}")
print(f"- Keyword match: {eval_35['keyword_match']}/5")
print(f"- Relevance: {eval_35['relevance']}")

# 🤖 Run GPT-4
print("\n🔷 GPT-4 Output:\n")
try:
    response_4 = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens
    )
    output_4 = response_4['choices'][0]['message']['content']
    eval_4 = evaluate_output(output_4)
    print(output_4)

    # 🧠 Evaluation Summary - 4
    print("\n🔎 GPT-4 Evaluation:")
    print(f"- Word count: {eval_4['word_count']}")
    print(f"- Keyword match: {eval_4['keyword_match']}/5")
    print(f"- Relevance: {eval_4['relevance']}")

except Exception as e:
    print("❌ GPT-4 call failed (no access or quota exceeded):", e)