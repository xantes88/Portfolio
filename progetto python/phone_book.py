# -*- coding: utf-8 -*-
"""Phone Book.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L7zY5D-3-mHVz3FJ_zsIa5iXfInqzt9t
"""

import json

# JSON file name that contains the contacts
file_name = 'Contacts.json'

# Function to read contacts from the JSON file
def read_contacts(file_name):
    try:
        with open(file_name, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        # Return an empty list if file does not exist
        return []

# Function to write contacts to the JSON file
def write_contacts(file_name, contacts):
    with open(file_name, 'w', encoding='utf-8') as file:
        json.dump(contacts, file, indent=4)

# Function to get valid (non-empty) input from the user
def get_valid_input(prompt):
    while True:
        value = input(prompt)
        if value.strip():  # Check that the input is not empty or just spaces
            return value
        else:
            print("This field cannot be empty. Please enter a valid value.")

# Function to check if a contact is a duplicate in the contacts list
def is_duplicate(new_contact, contacts):
    for contact in contacts:
        if contact["Name"] == new_contact["Name"] and contact["Surname"] == new_contact["Surname"] and contact["Number"] == new_contact["Number"]:
            return True
    return False

# Function to display all existing contacts in the phonebook
def print_contacts(file_name):
    contacts = read_contacts(file_name)
    if contacts:  # Check if the contacts list is not empty
        print("Contacts in the phonebook:")
        for contact in contacts:
            print(f"Name: {contact['Name']} Surname: {contact['Surname']} Number: {contact['Number']}")
    else:
        print("The phonebook is empty.")

# Function to search contacts by name or surname
def search_contacts(file_name, search_term):
    contacts = read_contacts(file_name)
    results = [contact for contact in contacts if search_term.lower() in contact['Name'].lower() or search_term.lower() in contact['Surname'].lower()]

    if results:
        print("Search results:")
        for contact in results:
            print(f"Name: {contact['Name']} Surname: {contact['Surname']} Number: {contact['Number']}")
    else:
        print("No contacts found matching the search term.")

# Function to modify an existing contact identified by name and surname
def modifica_contatto(file_name, nome, cognome, nuovo_nome=None, nuovo_cognome=None, nuovo_numero=None):
    contacts = read_contacts(file_name)
    for contact in contacts:
        if contact['Name'] == nome and contact['Surname'] == cognome:
            if nuovo_nome:
                contact['Name'] = nuovo_nome
            if nuovo_cognome:
                contact['Surname'] = nuovo_cognome
            if nuovo_numero:
                contact['Number'] = nuovo_numero
            write_contacts(file_name, contacts)
            print(f"Contact '{nome} {cognome}' successfully modified.")
            return
    print(f"Contact '{nome} {cognome}' not found in the phonebook.")

# Function to remove a contact identified by name and surname
def rimuovi_contatto(file_name, nome, cognome):
    contacts = read_contacts(file_name)
    for i, contact in enumerate(contacts):
        if contact['Name'] == nome and contact['Surname'] == cognome:
            contacts.pop(i)
            write_contacts(file_name, contacts)
            print(f"Contact '{nome} {cognome}' successfully removed.")
            return
    print(f"Contact '{nome} {cognome}' not found in the phonebook.")

# Main function to add, modify, remove, search, and display contacts
def main():
    contacts = read_contacts(file_name)  # Load existing contacts at startup

    while True:
        print("\nMenu:")
        print("1. View contacts")
        print("2. Add new contact")
        print("3. Modify contact")
        print("4. Remove contact")
        print("5. Search contact")
        print("6. Exit")
        scelta = input("Choose an option: ")

        if scelta == '1':
            print_contacts(file_name)
        elif scelta == '2':
            # Collect new contact details ensuring valid inputs
            name = get_valid_input("Enter First Name: ")
            surname = get_valid_input("Enter Surname: ")
            number = get_valid_input("Enter Phone Number: ")
            new_contact = {"Name": name, "Surname": surname, "Number": number}

            # Check if the new contact is a duplicate
            if not is_duplicate(new_contact, contacts):
                contacts.append(new_contact)  # Add new contact to the list
                write_contacts(file_name, contacts)  # Save updated list to JSON
                print("New contact added and saved in Contacts.json.")
            else:
                print("Contact already exists and will not be added.")
        elif scelta == '3':
            nome = get_valid_input("Enter the First Name of the contact to modify: ")
            cognome = get_valid_input("Enter the Surname of the contact to modify: ")
            nuovo_nome = input("Enter new First Name (leave empty to keep unchanged): ").strip() or None
            nuovo_cognome = input("Enter new Surname (leave empty to keep unchanged): ").strip() or None
            nuovo_numero = input("Enter new Phone Number (leave empty to keep unchanged): ").strip() or None
            modifica_contatto(file_name, nome, cognome, nuovo_nome, nuovo_cognome, nuovo_numero)
        elif scelta == '4':
            nome = get_valid_input("Enter the First Name of the contact to remove: ")
            cognome = get_valid_input("Enter the Surname of the contact to remove: ")
            rimuovi_contatto(file_name, nome, cognome)
        elif scelta == '5':
            search_term = get_valid_input("Enter the First Name or Surname to search: ")
            search_contacts(file_name, search_term)
        elif scelta == '6':
            print("Exiting...")
            break
        else:
            print("Invalid option. Please choose a valid option.")

# Run the main function if this script is executed directly
if __name__ == "__main__":
    main()