# -*- coding: utf-8 -*-
"""Rubrica Telefonica Definitivo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L7zY5D-3-mHVz3FJ_zsIa5iXfInqzt9t

#  Creazione Di una Rubrica Telefonica

Il progetto mira a semplificare la gestione dei contatti telefonici per i propri utenti, sviluppando un software intuitivo e interattivo che ottimizza l’organizzazione e l’accesso alle informazioni personali.

Gli utenti spesso trovano difficoltoso gestire e organizzare i loro contatti telefonici in modo efficiente. Esistono poche soluzioni semplici e intuitive che permettano di aggiungere, modificare, eliminare, visualizzare e cercare contatti in un unico luogo, direttamente dal terminale.

La soluzione fornirà un’applicazione console interattiva che, grazie ai principi della programmazione orientata agli oggetti (OOP) in Python, permetterà una gestione dei contatti semplice e strutturata. Gli utenti potranno facilmente salvare e caricare i contatti in un formato file (ad esempio JSON), garantendo una gestione dati efficiente e sicura.

## Requisiti del progetto

Requisiti del Progetto:

OOP in Python: Implementare i concetti di OOP per una struttura solida e scalabile.

Struttura Dati: Creare una struttura di dati efficiente per memorizzare i contatti.

Interfaccia Utente: Sviluppare un’interfaccia da linea di comando interattiva e facile da usare.

Funzionalità:

Aggiunta di un Contatto: Permettere l'inserimento di nuovi contatti.

Visualizzazione dei Contatti: Mostrare tutti i contatti presenti.

Modifica di un Contatto: Consentire la modifica dei dettagli dei contatti esistenti.

Eliminazione di un Contatto: Rimuovere contatti dalla rubrica.

Ricerca di un Contatto: Cercare contatti per nome o cognome.

Salvataggio e Caricamento: Salvare i contatti in un file e caricarli all’avvio.

Interfaccia Utente: L’interfaccia sarà basata su riga di comando, offrendo un menu principale con opzioni chiare per le varie operazioni, garantendo così una user experience fluida e accessibile anche per gli utenti meno esperti.

### Creazione della struttura
"""

import json

# Nome del file JSON che contiene i contatti
file_name = 'Contacts.json'

# Funzione per leggere i contatti dal file JSON
def read_contacts(file_name):
    try:
        with open(file_name, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Funzione per scrivere i contatti nel file JSON
def write_contacts(file_name, contacts):
    with open(file_name, 'w', encoding='utf-8') as file:
        json.dump(contacts, file, indent=4)

# Funzione per raccogliere input validi dall'utente
def get_valid_input(prompt):
    while True:
        value = input(prompt)
        if value.strip():  # per Verificare che l'input non sia vuoto
            return value
        else:
            print("Questo campo non può essere vuoto. Per favore, inserisci un valore valido.")

# Funzione che si usa per verificare se un contatto è un duplicato
def is_duplicate(new_contact, contacts):
    for contact in contacts:
        if contact["Name"] == new_contact["Name"] and contact["Surname"] == new_contact["Surname"] and contact["Number"] == new_contact["Number"]:
            return True
    return False

# Funzione per visualizzare i contatti esistenti della rubrica
def print_contacts(file_name):
    contacts = read_contacts(file_name)
    if contacts:  # Verifica se la lista dei contatti non è vuota
        print("Contatti nella rubrica:")
        for contact in contacts:
            print(f"Nome: {contact['Name']} Cognome: {contact['Surname']} Numero: {contact['Number']}")
    else:
        print("La rubrica è vuota.")

# Funzione per cercare contatti per nome o cognome
def search_contacts(file_name, search_term):
    contacts = read_contacts(file_name)
    results = [contact for contact in contacts if search_term.lower() in contact['Name'].lower() or search_term.lower() in contact['Surname'].lower()]

    if results:
        print("Risultati della ricerca:")
        for contact in results:
            print(f"Nome: {contact['Name']} Cognome: {contact['Surname']} Numero: {contact['Number']}")
    else:
        print("Nessun contatto trovato con il termine di ricerca fornito.")

# Funzione per modificare un contatto
def modifica_contatto(file_name, nome, cognome, nuovo_nome=None, nuovo_cognome=None, nuovo_numero=None):
    contacts = read_contacts(file_name)
    for contact in contacts:
        if contact['Name'] == nome and contact['Surname'] == cognome:
            if nuovo_nome:
                contact['Name'] = nuovo_nome
            if nuovo_cognome:
                contact['Surname'] = nuovo_cognome
            if nuovo_numero:
                contact['Number'] = nuovo_numero
            write_contacts(file_name, contacts)
            print(f"Contatto '{nome} {cognome}' modificato con successo.")
            return
    print(f"Contatto '{nome} {cognome}' non trovato nella rubrica.")

# Funzione per rimuovere un contatto
def rimuovi_contatto(file_name, nome, cognome):
    contacts = read_contacts(file_name)
    for i, contact in enumerate(contacts):
        if contact['Name'] == nome and contact['Surname'] == cognome:
            contacts.pop(i)
            write_contacts(file_name, contacts)
            print(f"Contatto '{nome} {cognome}' rimosso con successo.")
            return
    print(f"Contatto '{nome} {cognome}' non trovato nella rubrica.")

    # Funzione principale per aggiungere un nuovo contatto e visualizzare i contatti esistenti
def main():
    contacts = read_contacts(file_name)  # Carica i contatti esistenti all'avvio

    while True:
        print("\nMenu:")
        print("1. Visualizza contatti")
        print("2. Aggiungi nuovo contatto")
        print("3. Modifica contatto")
        print("4. Rimuovi contatto")
        print("5. Cerca contatto")
        print("6. Esci")
        scelta = input("Scegli un'opzione: ")

        if scelta == '1':
            print_contacts(file_name)
        elif scelta == '2':
            # Si raccolgono nuovi dati assicurandosi che vi siano input validi
            name = get_valid_input("Inserisci il Nome: ")
            surname = get_valid_input("Inserisci il Cognome: ")
            number = get_valid_input("Inserisci il Numero di telefono: ")
            new_contact = {"Name": name, "Surname": surname, "Number": number}

            # Si verifica se il nuovo contatto è un duplicato
            if not is_duplicate(new_contact, contacts):
                # Si aggiunge il nuovo contatto alla lista dei contatti
                contacts.append(new_contact)

                # Si riporta il nuovo contatto nel file JSON
                write_contacts(file_name, contacts)

                print("Nuovo contatto aggiunto e salvato nel file Contacts.json.")
            else:
                print("Il contatto esiste già nella rubrica e non sarà aggiunto.")
        elif scelta == '3':
            nome = get_valid_input("Inserisci il Nome del contatto da modificare: ")
            cognome = get_valid_input("Inserisci il Cognome del contatto da modificare: ")
            nuovo_nome = input("Inserisci il nuovo Nome (lascia vuoto per non modificare): ").strip() or None
            nuovo_cognome = input("Inserisci il nuovo Cognome (lascia vuoto per non modificare): ").strip() or None
            nuovo_numero = input("Inserisci il nuovo Numero di telefono (lascia vuoto per non modificare): ").strip() or None
            modifica_contatto(file_name, nome, cognome, nuovo_nome, nuovo_cognome, nuovo_numero)
        elif scelta == '4':
            nome = get_valid_input("Inserisci il Nome del contatto da rimuovere: ")
            cognome = get_valid_input("Inserisci il Cognome del contatto da rimuovere: ")
            rimuovi_contatto(file_name, nome, cognome)
        elif scelta == '5':
            search_term = get_valid_input("Inserisci il Nome o Cognome da cercare: ")
            search_contacts(file_name, search_term)
        elif scelta == '6':
            print("Uscita...")
            break
        else:
            print("Opzione non valida. Per favore, scegli un'opzione valida.")

# Comando per eseguire la funzione principale
if __name__ == "__main__":
    main()